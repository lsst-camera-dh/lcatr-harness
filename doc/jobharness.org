#+TITLE: LSST CCD Test Job Harness
#+AUTHOR: Brett Viren
#+EMAIL: bv@bnl.gov
#+DATE: \today

#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER:   hyperindex=true,
#+LATEX_HEADER:   plainpages=false,
#+LATEX_HEADER:   colorlinks=true,
#+LATEX_HEADER:   linkcolor=black
#+LATEX_HEADER: }

#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

#+BEGIN_ABSTRACT
The individual CCDs and their larger aggregates in the form of RTMs
undergo a series of tests.  These tests are broken down into atomic
jobs (aka "work processes").  Only parts of tests that are implemented
by running a software program are considered in this note.  The note
describes a job /harness/ which controls the execution of these jobs.
#+END_ABSTRACT

* Terms

The terms used in this note are defined.

 - unit :: A unit of testing (eg, a CCD or an RTM)

 - test :: production of data from the examination of a unit or from
           analyzing output from another test.  

 - job :: any type of test (or portion of a test) that is implemented
          by executing a software process (or multiple, related
          processes) and producing one or more files containing the
          results of the test.

 - station :: a physical test that generates data by takeing
              measurements of a unit either by human labor or by
              invoking a software process.

 - analysis :: a pure software test operating on the output files of
               another test and producing derived output files of its
               own.

 - archive :: the root of a site-central, organized file-system
              hierarchy storing all result files of all jobs.

 - stage :: the root of a file-system local to the computer running a
            job.  It temporarily stores the job's output files and,
            where needed, holds a temporary copy of the output of
            prior jobs needed as input to the current job.

 - operator :: an identified individual charged with running a job

 - LIMS :: the Laboratory Information Management System.  It consists
           of a central database and fronting web application for
           storing job result summaries, meta-data bookkeeping and
           providing driving input to the job harness.

* The Job Harness

The job harness ties together the LIMS, the running of individual job
implementations and their result files.  It enforces a uniform
interface between LIMS and the jobs and between jobs and the file
archive.  It hides unneeded details of invoking a job from an
operator.

* Cycle of job execution.

The role of the job harness is described by breaking down the cycle of
executing one job.

** Input parameters

A cycle starts by determining the input parameters to a job.  A these
parameters include:

 - unit :: the type of unit being tested (eg CCD or RTM)

 - ID :: the unique identifier of the unit

 - name :: the canonical name for the job that will be run

 - version :: the released version of the job software

It is outside the scope of this document to state how the values of
these input parameters will be determined however it is expected that
they will ultimately be derived from a LIMS database query.

** Harness Invocation

The harness is implemented in Python and can be invoked as a command
line program or as part of a larger Python program.

** Initial Environment 

The job environment is built in three steps.  It is initialized from
the environment from which the harness is invoked (FIXME: should we
limit this?) to which variables are added to expose the input
parameters:

 - =CCDTEST_UNIT= :: the type of unit being tested

 - =CCDTEST_UID= :: the unique identifier of the unit

 - =CCDTEST_NAME= :: the canonical name of the test

 - =CCDTEST_VERSION= :: the version string for the job's software

** Static Job Environment

The environment is then amended to use environment Modules (see
http://modules.sf.net/) and to load the module specific for the given
job.  Details of this step are described in the note on "[[./modulefiles.org][Describing
LSST Sensor Test Software Environment with Modules]]".  The module
loaded is determined by the canonical name and version given as input
parameters.  If loading fails the harness aborts.

** Job ID Allocation.

Every job has an associated, unique identifier.  This identifier is
allocated from LIMS based input parameters described above and these
additional items:

 - username :: user name of the account that invoked the harness
               (taken from the environment variable =USER=).

 - hostname :: the fully qualified host name of the computer running
               the harness (taken from the OS)

The allocation is done by making an HTTP query on the LIMS web front
end.  The query supplies the these parameters and returns the
allocation in the form of an HTML file containing the job identifier.

** Input Dependencies Resolution

Some jobs require that the output files of prior jobs are available as
input.  The harness resolves these dependencies by a call to a LIMS
web service[fn:deps] in much the same was as the job identifier is
allocated.  The query returns the previously registered input
parameters and associated job ID for all successfully completed jobs
on which the current one depends.  In the case where multiple jobs of
any type have been run it is up to LIMS to determine which one shall
provide the input to the current job.

[fn:deps] There is a mode used for testing where such dependencies are resolved through guesses made based on the contents of the archive.

** Final Job Environment Configuration

Based on the allocated job ID and any input dependencies the job
environment is updated to include variables of the form:

 - =CCDTEST_OUTDIR= :: the directory (relative path rooted on either
      the local stage or the archive) from which the job will run and
      which will contain any and all output files.

 - =CCDTEST_<dep>_OUTDIR= :: the directory (relative path rooted on
      either the local stage or the archive) to find any files
      produced by prior jobs on which the current job depends.  There
      is on variable for each prior job named =<dep>=.

** Staging and File System Checking

The local stage file system is checked to assure that =CCDTEST_OUTDIR=
does not exist.  The archive is checked for the existence of all
=CCDTEST_<dep>_OUTDIR= directories.  If these checks fail the harness
aborts.

The =CCDTEST_<dep>_OUTDIR= directories are copied from the archive to
a corresponding location on the local stage and the =CCDTEST_OUTDIR=
directory is created and becomes the harness's current working directory.

** Production Step of the Job

The production program, as specified by the =CCDTEST_JOB_PRODUCER=
environment variable, is executed.  Standard output and error are
logged.  If the returns a failure code (non-zero) the harness aborts.

** Validation Step of the Job

The validation program, as specified by the =CCDTEST_JOB_VALIDTOR=
environment variable, is executed.  The validator is expected to
perform the following tasks:

 - Run any job-specific validation on the produced files and return a
   non-zero code if validation fails.

 - Produce one or more /result summary/ files (see note on 
   "[[schema.org][LSST CCD Acceptance Testing File Schema]]")

 - Produce a single /meta data/ file (see same note) with the name of
   =metadata.fits=.

Standard output and error are logged.  If the returns a failure code
(non-zero) the harness aborts.

** Archiving

The contents of the current directory are copied into =CCDTEST_OUTDIR=
rooted at the archive.

** Termination

At exit the job harness notifies LIMS about the completion of the job
by making a web service call that includes the following information:

 - Job ID :: the job identifier previously allocated

 - status :: a status code indicating nominal success or a description
             of a failure if it occurred (and was caught).


** Clean up

Files in the stage are removed.

Details of each step are given in the following subsections.


* Configuration file

TBD. 

* External requirements

The following things must be provided before the job harness can run

** Authentication

The job harness will need to run from an account that can access the
archive server via SSH.  This is needed to perform existence checks on
the archive and to copy files between the archive and the local stage.
For unattended running it is strongly recommended to setup an SSH key
pair such that a phassphrase/password need not be given interactively
while jobs run.

** Environmental Modules

As described above, the job harness relies on externally defined
environmental Modules.  It is expected that the Modules support
programs are already installed and that the suite of job-specific
/modulefiles/ exist.  Their locations may be specified in the harness
configuration file, previously set up using standard Modules
environment variables or the harness will attempt to guess the
locations.



-----
