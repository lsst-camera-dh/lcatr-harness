#+TITLE: LSST CCD Test Job Harness
#+AUTHOR: Brett Viren
#+EMAIL: bv@bnl.gov
#+DATE: \today

#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER:   hyperindex=true,
#+LATEX_HEADER:   plainpages=false,
#+LATEX_HEADER:   colorlinks=true,
#+LATEX_HEADER:   linkcolor=black
#+LATEX_HEADER: }

#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

#+BEGIN_ABSTRACT
Every test station and analysis software job runs under a common
harness.
#+END_ABSTRACT

* Terms

 - test :: an manual or automated examination of a CCD by personnel,
           hardware or software producing in one or more files
           containing the results of the examination.  One test may
           non-cyclically depend on the results of another.

 - job :: the running of an automated test on a single CCD through
          invoking one ore more related software programs.

 - station :: a physical test that takes measurements on a CCD

 - analysis :: a pure software test operating on the output files of
               one test and producing derived output files of its own.

 - archive :: a central, organized file-system hierarchy storing the
              result files of all tests.

 - stage :: a directory on the machine running a test where files are
            written as they are produced.

 - operator :: an identified individual charged with running a job

 - LIMS :: a central database with fronting application for storing
           result summaries and meta-data bookkeeping.

* Requirements

The job harness provides a thin shim that runs the software on
GNU/Linux and Cygwin/Windows platforms that makes up an LSST CCD test
station or analysis job.  It provides the job with a standard run-time
environment.  It is responsible for communicating with LIMS to
providing bookkeeping information about the job.  It marshals the
resulting files from a local staging area to the proper location in
the archive file system.  Successful completion of the job includes
feeding a summary of the results to the database.  One run of the job
is broken into well defined steps producing well defined products.
Every step must either successfully result in the expected products or
it must fail in a way that makes clear that any intermediaries are
invalid.

* Steps 

The job proceeds through these steps:

 1) The job harness is invoked by the operator who specifies input
    parameters for the job.

 2) The harness communicates to LIMS the input parameters and requests
    a unique job identifier (/jobid/)

 3) The input parameters are used to configure the run-time
    environment including defining a top-level main and validation
    program (script) to run.  See [[./dirhier.org]].

 4) A local staging directory is created and made current.

 5) The top-level program is executed.

 6) The validation program is executed.

 7) The contents of the current directory are copied to the archive.

 8) The FITS meta-file is provided to the database ingest process

 9) The job exits.

Details of each step are given in the following subsections.

** Invocation

The job harness is invoked interactively by the operator of the test
station or analysis.  If all required input parameters are not
specified the operator will be queried to supply missing parameters.
LIMS can be queried in order to provide a selection from a list of
possible values.  For example, at a given station and at a given time
only a subset of CCD IDs can be available and this list can be
presented to the user to facilitate indicating which CCD will be
tested.

** Job ID allocation

To track which jobs are in progress or completed a unique job
identifier (job ID) number is assigned to each invocation of the job
harness in a production setting.  This job ID is allocated from LIMS
by presenting information about the indented run:

 - CCD ID :: the unique identifier of the CCD being tested

 - Job name :: the canonical name for the test

 - Operator :: the user name of the account from which the harness is being run

 - Stamp :: the date/time the job started

 - Version :: the version of the job software (Git tag and commit hash)

These quantities and the returned job ID are written to the FITS
meta-data file produced at the end of the job.

** Run-time environment configuration

Based on the input parameters, particularly the job name and version,
the run-time environment for the test software is configured.  The
environment is setup to use a previously installed release of the test
software (FIXME: reference document).  

The run-time environment provides access to the input parameters
through environment variables.  Also defined are two variables that
hold the path to two executable files:

 - =CCDTEST_JH_RUN= :: the main test program

 - =CCDTEST_JH_VALIDATE= :: the validation program

** Local staging area

An empty directory is created and made current.  Test software
must not produce any files outside this directory.

** Running the main test program

The main test program, typically a script, encapsulates all details
needed to run a test.  It must rely on the environment for any test
specific information and it must not encode any test specific
information into the names of any output files.  If any error is
encountered it should return a non-zero error code.

** Running the validation program

The validation program has three duties:

 1) perform any test-specific validation

 2) produce the summary result FITS file(s)

 3) produce the meta-data FITS file

If it fails it should return a non-zero error code.

** Archiving the results

If the main test program and validation program succeed the entire
contents of the current directory are copied to the archive directory
hierarchy.  The archive location is built from the input parameters.

** Uploading to LIMS

The meta-data FITS file is provided to the LIMS ingest process (FIXME:
provide reference) in order for the results of the test to be
completed.  This is done (t.b.d.) either by an HTTP file upload or by
an HTTP POST providing the location of the file on a shared archive
file system.

** Termination

The job harness exits with a non-zero error code if any error was
encountered.

* External requirements

The following things must be provided before the job harness can run

** Authentication

The job harness will need to run =rsync= over SSH to copy result files
to the final archive file system.  This relies on an SSH key pair to
be generated and the public key installed on the archive file system
server.  

** Environmental Modules

The job harness relies on externally defined environmental Modules
(see http://modules.sf.net/) to define the run time environment for
the software that makes up a test station or analysis.  The Modules
package is assumed to be installed from source in the standard manner
or as a system package.  The modulefiles should be written in the
usual way but following some additional conventions described in the
following subsections.

*** Naming

A Module is loaded through a name formed by the joining the canonical
test name and its version string (the Git tag) with a dash ("=-=").
For example:

#+begin_example
station1-v1.0
#+end_example


*** Dependencies

Only the modulefile for the test being run will be loaded and so it
must take care to load the modulefiles of any other packages that it
requires.  A modulefile should always be tested assuming no special
environment other than what is necessary to run the "=module=" command
itself.

In addition, any test (typically analyses) that depend on the output
files of other tests must specify these tests as described in
[[./dirhier.org]].




-----
