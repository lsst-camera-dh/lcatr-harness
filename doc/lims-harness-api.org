#+TITLE: The LIMS and Job Harness API
#+AUTHOR: Brett Viren
#+EMAIL: bv@bnl.gov
#+DATE: \today

#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER:   hyperindex=true,
#+LATEX_HEADER:   plainpages=false,
#+LATEX_HEADER:   colorlinks=true,
#+LATEX_HEADER:   linkcolor=black
#+LATEX_HEADER: }

#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:


The LCATR job harness communicates with LIMS in order to register job
parameters, allocate job identifiers, provide status updates and
upload result summaries.  This document describes their communication
interface.

* Communication

All communication is initiated by a query from the harness in the form
of an HTTP POST.  Any GET method is not specified here.  The queried
URL ends in =/Results/<command>=.  All POST data uses a single keyword
=jsonObject= and a value which is a JSON-encoded string.  All
responses, including errors, from LIMS are of a MIME type
=application/json= and contain a JSON-encoded string.  The form of the
JSON strings in a POST query and their return are described for each
command below.  A successful HTTP query will be indicated with the
usual code 200 and this is independent of any potential
application-level logic errors.

* Commands

There are three LIMS commands that the job harness calls.  One for
registering a new job, one for updating its status and one for
uploading a summary of its results.  For each command there is
specified a query data structure and either nominal return and
exceptional data structures.  These data structures are, at top level,
in the form of a dictionary.

** Common

Beyond the command-specific entries, every query data structure has
the following:

 - =jobid= :: the LIMS ID string returned as part of registrations
              (note: for registration, this entry is ignored and may
              be =null=)

 - =stamp= :: a time stamp that the client associates with the query.
              It is of the form of seconds since the Unix epoch.


** Registration

The registration command is =requestID=.  It is used to attempt to
register a new job with LIMS and to deliver to the harness a list of
any prerequisite jobs that must have completed before the registering
one may begin.

The query contains a specific subset of the job's input parameters.

 - =unit_type= :: the type of unit being tested (CCD/RTM)

 - =unit_id= :: the identifier of the unit

 - =job= :: canonical name of the job

 - =version= :: the version of the software to be run

 - =operator= :: user name of the account running the harness

The nominal return gives a LIMS job identifier string and a list of
the registered information of any jobs on which the requesting one
depends.

 - =jobid= :: the identifier to use for this job
 
 - =prereq= :: a list of dictionaries, each with keys named as the
               post parameters as above plus an additional =jobid=
               giving the registered job identifier for each.

If an exception occurs no job identifier is allocated and an error
message is returned:

 - =jobid= :: null

 - =error= :: a message describing why the job should not run


** Status updates

Status updates are sent to LIMS through the course of the job.  The
command is =update=.

The query includes these entries:

 - =step= :: the canonical name of the step just completed.

 - =status= :: =null= if the step completed successfully, otherwise it
               contains a human readable string that indicates the
               nature of the failure.  

Note, reported failures are fatal and no follow-up status updates
should be expected from the job.  

The current list of =step= values is:

 - =configured= :: the job environment has been configured

 - =staged= :: files from any prior dependencies have been copied to the
             local stage and the job's output directory is created.

 - =produced= :: the primary program of the job (see below) has run successfully

 - =validated= :: the secondary program validated the output and
                produced required result summary and meta data files
                (see below)

 - =archived= :: files are successfully copied to the archive

 - =purged= :: local stage area has been cleared (optional)

Both the nominal and the exceptional response has a single key:

 - =acknowledge= :: =null= if the status is accepted.  If the job
                    should abort this will contain a human readable
                    message explaining why.

** Summary Result Upload

When the job successfully produces a result it will upload a summary
via the =ingest= command.  In addition to the common entries this
command expects a single additional one:

 - =result= :: a list of schema-compliant result summary data
               structures.

Each schema-compliant result summary data structure is a dictionary
that contains at least these entries:

 - =schema_name= :: canonical name for the part of the result that the
                    data pertains to and the schema it follows.

 - =schema_version= :: the exact version of the schema that the data
                       follows.

The payload of the actual result summary is sent as additional
entries.  More information about schemas is in the "LCATR Schema"
document.

Both the nominal and the exceptional response has a single key:

 - =acknowledge= :: =null= if the status is accepted.  If the job
                    should abort this will contain a human readable
                    message explaining why.


 
 


