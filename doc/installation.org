#+TITLE: LCATR Job Installation
#+SETUPFILE: setup.org

This note describes how to install the LSST CCD acceptance testing Job
Harness (JH) and the job software it runs.

* Installation of Job Harness and Related Code

The job harness and related code is released as Python source
packages.  They are best installed in a =virtualenv= virtual
environment[fn:venv] by =pip= or =easy_install=.

** Setting up a Python Virtual Environment

Install =virtualenv=, make a virtual environment root area and
activate it:

#+begin_src sh
virtualenv /path/to/lcatr/venv
source /path/to/lcatr/venv/bin/activate
#+end_src

At this point the environment variable =$VIRTUAL_ENV= points to this
installation location.  

** Configuring the Python repository

The job harness and related code is made available as Python packages
which may be installed in the conventional manner using either =pip=
or =easy_install=.  The packages are made available from[fn:pypicaveat]:

#+begin_example
http://lycastus.phy.bnl.gov/pypi/
#+end_example

To configure =pip= to use this server add the following to the file
=~/.pip/pip.conf=:

#+begin_example
[global]
index-url = http://lycastus.phy.bnl.gov/pypi/
#+end_example

To configure =easy_install= to use this server add the following to
the file =~/.pydistutils.cfg=:
 
#+begin_example
[easy_install]
index_url = http://lycastus.phy.bnl.gov/pypi/
#+end_example

[fn:pypicaveat] This is a temporary location and internal to BNL.

** Installing Job Harness and Support Code

After activating the virtual environment as above issue:

#+begin_example
pip install lcatr lcatr-schema lcatr-harness
#+end_example

or similar if you elect to use =easy_install=.

You should now be able to run this simple test:

#+begin_example
python -c 'from lcatr import schema; print schema.store'
lcatr_harness --help
#+end_example

** Preparing a release of Job Harness

This section is for Job Harness developers.  To prepare a release:

 1) Increment the version string in =setup.py=

 2) Produce a source tarball with =python setup.py sdist=

 3) Copy the tarball to the appropriate subdirectory under =/var/pypi=



* Test Station and Analysis Software Installation Requirements

Each version of the job software itself should be installed in a
central "install area" under:

#+BEGIN_EXAMPLE
$LCATR_INSTALL_AREA/<jobname>/<jobversion>/
#+END_EXAMPLE

The =<jobname>= is the canonical name for the software and the
=<jobversion>= string must match that of a GIT tag which marks the
version of the software that is installed.  It is up to the software
installation manager to assure this correspondence.

The value of =LCATR_INSTALL_AREA= is specific to the hosting computer
and may be specified through the usual job harness configuration
mechanism or in the calling environment.

** Environment Management

The job harness enforces consistent environment management of the
various software packages through the use of the Environment Modules
Project[fn:web] and its /modulefiles/.  These files define the
environment variables required by the harness as well as any
additional environment needed by a particular package.  There is a
/modulefile/ corresponding to the name and version of each installed
instance of the software.  Some conventions are followed to make
writing a /modulefile/ simple.

[fn:web] http://modules.sf.net/

*** Conventions for writing a /modulefile/

The environment requirements placed on the software by the job harness
can be satisfied by properly calling the function =lcatr_package=
which is defined in the =lcatr.tcl= library provided by the
/modulefile/ package.  The minimum module file is thus:

#+BEGIN_SRC Tcl
source $::env(LCATR_MODULES)/lcatr.tcl
lcatr_package <producer> <validator>
#+END_SRC

The =<producer>= and =<validator>= arguments are taken to be paths
relative to =$LCATR_INSTALL_AREA/<jobname>/<jobversion>/= and pointing
to the /producer/ and /validator/ main programs, respectively.


*** Locating a /modulefile/

The /modulefile/ may in general be located as supported by the
Environment Module Project system.  Ultimately the locations checked
are governed by the value of the =MODULEPATH= environment variable.
Two locations in particular are suggested for LCATR packages.

A central git repository[fn:mfgit] of /modulefiles/ is maintained.  This
repository is populated with directories and files named like
=<jobname>/<jobversion>=.  For packages that have their /modulefiles/
kept in this repository a new /modulefile/ must be added for each
release of the software.  It is this repository area that is pointed
to by the =LCATR_MODULES= environment variable used above.

It is common for /modulefiles/ to be unchanged between different
releases of the software and so it can become burdensome to make new
ones for each release.  To rectify this a /modulefile/ can be
maintained directly in the software source repository and be installed
along with the package to the installation area.  In this case the
/modulefile/ must exist at top-level in the package directory and be
called =.modulerc=
 

In summary, every installed instance of the software must have a
/modulefile/ in at least one of two places:

#+begin_example
$LCATR_INSTALL_AREA/<jobname>/<jobversion>/.modulerc
$LCATR_MODULES/<jobname>/<jobversion>
#+end_example

By default the =MODULEPATH= variable is set to first check the install
area before the central /modulefiles/ repository.

[fn:mfgit] https://git.racf.bnl.gov/astro/cgit/lcatr/modulefiles.git/

** Installation Methods

This section gives some suggested installation methods.

*** Simple Packages

Packages that that do not require any particular installation other
than unpacking can be prepared by producing a tar file directly from
their git repository and based on the git tag.  First produce the tar
file:

#+begin_src sh
git archive -o <jobname>-<jobversion>.tgz --format=tgz --prefix=<jobname>/<jobversion>/ <jobversion>
#+end_src

Then, install it via:

#+begin_src sh
cd $LCATR_INSTALL_AREA
tar -xzvf /path/to/<jobname>-<jobversion>.tgz
#+end_src

See above for issues involved in writing the /modulefile/.

*** Python =distutils= packages

t.b.d.


* High Level Configuration

Some items need to be set up that are outside the scope of the job
harness.

** Indicating location of installed software

Each software package should be configured as per the sections above.
A few high-level settings are also needed.  These are:

 - =install_area= :: the directory under which all required software
                     is installed.

 This can either be set in a job harness configuration file (see
 [[./design.org]]) or as the =LCATR_INSTALL_AREA= environment variable.

** Preparing The Results Archive and Local Stage

Files resulting from a test or analysis job are first populated in the
job's working directory which exists as a sub-directory rooted in the
local stage file system.  When the job finishes successfully the
result files will be copied to the central archive in a similarly
named sub-directory.  If the job requires files produced by prior jobs
the harness will copy these to the stage, preserving their
sub-directory names.

Before running any jobs the archive and local stage root must be
created and be accessible by the harness (as they are specified with
the relevant harness configuration parameters).  Any job specific
directories in the archive or the local stage are created by the
harness and it is an error if they preexist.  If other job output
is found to preexist in the local stage it will used as-is.


